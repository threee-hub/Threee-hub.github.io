<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘山的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Threee-hub.github.io/"/>
  <updated>2020-02-15T05:07:25.193Z</updated>
  <id>http://Threee-hub.github.io/</id>
  
  <author>
    <name>刘山</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用JAVA实现雷电小游戏</title>
    <link href="http://Threee-hub.github.io/2020/02/14/java%E5%AE%9E%E7%8E%B0%E9%9B%B7%E7%94%B5%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>http://Threee-hub.github.io/2020/02/14/java实现雷电小游戏/</id>
    <published>2020-02-14T11:26:07.000Z</published>
    <updated>2020-02-15T05:07:25.193Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用JAVA实现雷电小游戏"><a href="#用JAVA实现雷电小游戏" class="headerlink" title="用JAVA实现雷电小游戏"></a>用JAVA实现雷电小游戏</h3><ol><li>效果图如下：<br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/%E9%9B%B7%E7%94%B5.png" alt="雷电"></li><li>实现雷电小游戏，主要创建了三个类：Ball类、BallJPanel类、BallJFrame类<blockquote><p><strong>Ball类中定义了敌方战机、子弹和我方子弹，将该三者都看成圆，即看成同一个类</strong><br><strong>Ball类中包含dr()&lt;画出敌机及其子弹&gt;、mv()&lt;敌机及其子弹的移动&gt;、isTouch()&lt;判断子弹之间是否碰撞&gt;方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;<span class="comment">//圆角坐标</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> ori;<span class="comment">//方向 4向上 5向下</span></span><br><span class="line">    <span class="keyword">int</span> type;<span class="comment">//标记类型，0我方发出，1敌方发出</span></span><br><span class="line">    <span class="comment">//awt包中Swing界面能识别图片的类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Image image_fire =</span><br><span class="line">            <span class="keyword">new</span> ImageIcon(<span class="string">"fire.gif"</span>).getImage();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Image image_el =</span><br><span class="line">            <span class="keyword">new</span> ImageIcon(<span class="string">"el_0.gif"</span>).getImage();</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ball</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ball</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> r, <span class="keyword">int</span> ori, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">        <span class="keyword">this</span>.ori = ori;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//画在相应的JPanel中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dr</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                g.drawImage(image_fire,x,y,</span><br><span class="line">                        <span class="number">2</span>*r,<span class="number">2</span>*r,<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                g.drawImage(image_el,x,y,</span><br><span class="line">                        <span class="number">2</span>*r,<span class="number">2</span>*r,<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断两个球是否相遇</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTouch</span><span class="params">(Ball ball2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isTouch = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//第一个圆心坐标</span></span><br><span class="line">        <span class="keyword">int</span> x1 = x + r;</span><br><span class="line">        <span class="keyword">int</span> y1 = y + r;</span><br><span class="line">        <span class="comment">//b2圆心坐标</span></span><br><span class="line">        <span class="keyword">int</span> x2 = ball2.x + ball2.r;</span><br><span class="line">        <span class="keyword">int</span> y2 = ball2.y + ball2.r;</span><br><span class="line">        <span class="keyword">double</span> s = Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));</span><br><span class="line">        <span class="keyword">if</span> (s&lt;=r+ball2.r)&#123;</span><br><span class="line">            isTouch = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isTouch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//我方子弹或敌机及其子弹移动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mv</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ori)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: y--;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: y++;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>BallJPanel类中定义了画笔类、鼠标事件、监听器、多线程、我方飞机类等</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> threee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/14 - 13:20</span></span><br><span class="line"><span class="comment"> * 单继承 多实现</span></span><br><span class="line"><span class="comment"> * MouseMotionListener拖动，移动事件</span></span><br><span class="line"><span class="comment"> * MouseListener鼠标点击事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BallJPanel</span> <span class="keyword">extends</span> <span class="title">JPanel</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">MouseListener</span>, <span class="title">MouseMotionListener</span>,<span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//我方子弹集合</span></span><br><span class="line">    ArrayList&lt;Ball&gt; allBalls;</span><br><span class="line">    <span class="comment">//敌方子弹飞机集合</span></span><br><span class="line">    ArrayList&lt;Ball&gt; allSnows;</span><br><span class="line">    <span class="comment">//是否开火，true开火</span></span><br><span class="line">    <span class="keyword">boolean</span> isFire;</span><br><span class="line">    <span class="comment">//积分</span></span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="comment">//我方飞机图片</span></span><br><span class="line">    Image hero_img = <span class="keyword">new</span> ImageIcon(<span class="string">"hero.gif"</span>).getImage();</span><br><span class="line">    <span class="comment">//监听：随时准备好，等待事件的触发，一旦触发，相应的方法会发生效果</span></span><br><span class="line">    <span class="comment">//监听代码放在构造器中，表示BallJPanel一初始化就可监听了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BallJPanel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一个this代表当前BallJPanel</span></span><br><span class="line">        <span class="comment">//第二个this代表当前鼠标事件</span></span><br><span class="line">        <span class="keyword">this</span>.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.addMouseMotionListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//我方飞机默认出现的位置</span></span><br><span class="line">        plane.x = <span class="number">100</span>;</span><br><span class="line">        plane.y = <span class="number">400</span>;</span><br><span class="line">        <span class="comment">//得分默认为0</span></span><br><span class="line">        score = <span class="number">0</span>;</span><br><span class="line">        allBalls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        allSnows = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paint(g);</span><br><span class="line">        <span class="comment">//显示背景图</span></span><br><span class="line">        <span class="comment">//通过当前类所有的目录取路径</span></span><br><span class="line">        URL imgURL = getClass().getResource(<span class="string">"back.jpg"</span>);</span><br><span class="line">        ImageIcon icon = <span class="keyword">new</span> ImageIcon(imgURL);</span><br><span class="line">        <span class="comment">//放入图片</span></span><br><span class="line">        g.drawImage(icon.getImage(),<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">600</span>,<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//我方飞机</span></span><br><span class="line">        g.drawImage(hero_img,plane.x,plane.y,<span class="number">200</span>,<span class="number">100</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//积分</span></span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="string">"宋体"</span>,Font.BOLD,<span class="number">24</span>));</span><br><span class="line">        g.drawString(<span class="string">"积分"</span>,<span class="number">300</span>,<span class="number">35</span>);</span><br><span class="line">        g.drawString(String.valueOf(score),<span class="number">350</span>,<span class="number">35</span>);</span><br><span class="line">        g.drawString(<span class="string">"生命"</span>,<span class="number">300</span>,<span class="number">60</span>);</span><br><span class="line">        g.drawString(String.valueOf(plane.life),<span class="number">350</span>,<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//假设allBalls有Ball时，每个ball要画出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;allBalls.size(); i++)&#123;</span><br><span class="line">            Ball b = allBalls.get(i);</span><br><span class="line">            b.dr(g);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;allSnows.size(); i++)&#123;</span><br><span class="line">            Ball b = allSnows.get(i);</span><br><span class="line">            b.dr(g);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线程需要做的事</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断isFire是否为true</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//通过count控制频率</span></span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count&gt;=Integer.MAX_VALUE)&#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不断落下的敌机</span></span><br><span class="line">            <span class="keyword">if</span>(count%<span class="number">60</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                Ball b = <span class="keyword">new</span> Ball((<span class="keyword">int</span>)(Math.random()*<span class="number">400</span>),</span><br><span class="line">                        -<span class="number">50</span>,<span class="number">30</span>,<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line">                allSnows.add(b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//敌方飞机子弹下移</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;allSnows.size(); i++)&#123;</span><br><span class="line">                Ball b1 = allSnows.get(i);</span><br><span class="line">                b1.mv();</span><br><span class="line">                <span class="keyword">if</span> (b1.y&gt;<span class="number">600</span>)&#123;</span><br><span class="line">                    allSnows.remove(b1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断isFire是否为true</span></span><br><span class="line">            <span class="keyword">if</span> (isFire &amp;&amp; count%<span class="number">100</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                Ball ball1 = <span class="keyword">new</span> Ball(plane.x+<span class="number">100</span>,plane.y+<span class="number">50</span>,<span class="number">20</span>,<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">                allBalls.add(ball1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//我方子弹上移</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;allBalls.size(); i++)&#123;</span><br><span class="line">                Ball b2 = allBalls.get(i);</span><br><span class="line">                b2.mv();</span><br><span class="line">                <span class="keyword">if</span> (b2.y&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    allBalls.remove(b2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当我方子弹遇到敌机时，双方都消失，积分 +10</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;allBalls.size(); i++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;allSnows.size(); j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( i&lt;allBalls.size() &amp;&amp; j&lt;allSnows.size()</span><br><span class="line">                    &amp;&amp; allBalls.get(i).isTouch(allSnows.get(j)))&#123;</span><br><span class="line">                        allBalls.remove(i);</span><br><span class="line">                        allSnows.remove(j);</span><br><span class="line">                        score += <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//我方战机碰撞敌方战机时，生命 -10</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;allSnows.size(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i&lt;allSnows.size() &amp;&amp; plane.isCrash(allSnows.get(i)))&#123;</span><br><span class="line">                    plane.life -= <span class="number">10</span>;</span><br><span class="line">                    allSnows.remove(i);</span><br><span class="line">                    <span class="keyword">if</span>(plane.life &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                        plane.die = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="comment">//弹出信息提示框</span></span><br><span class="line">                        JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="string">"GAME OVER！"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (plane.die)&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">        isFire = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">        isFire = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//拖动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//e是鼠标的实时位置</span></span><br><span class="line">        plane.x = e.getX()-<span class="number">100</span>;</span><br><span class="line">        plane.y = e.getY()-<span class="number">50</span>;</span><br><span class="line">        repaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseMoved</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//e是鼠标的实时位置</span></span><br><span class="line"><span class="comment">//        x = e.getX();</span></span><br><span class="line"><span class="comment">//        y = e.getY();</span></span><br><span class="line"><span class="comment">//        repaint();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">plane</span></span>&#123;</span><br><span class="line">    <span class="comment">//我方飞机坐标</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="comment">//我方飞机生命值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> life = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//飞机是否死亡</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> die = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCrash</span><span class="params">(Ball ball2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isCrash = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> x1 = plane.x + <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> y1 = plane.y + <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">int</span> x2 = ball2.x + ball2.r;</span><br><span class="line">        <span class="keyword">int</span> y2 = ball2.y + ball2.r;</span><br><span class="line">        <span class="keyword">double</span> s = Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));</span><br><span class="line">        <span class="keyword">if</span> (s&lt;=<span class="number">30</span>+ball2.r)&#123;</span><br><span class="line">            isCrash = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isCrash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>BallJFrame类中定义了主窗体，main方法。用sh()方法画出界面，构造器运行线程</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BallJFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    BallJPanel jPanel;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BallJFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jPanel = <span class="keyword">new</span> BallJPanel();</span><br><span class="line">        <span class="keyword">this</span>.add(jPanel);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(jPanel);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写一个方法画出界面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sh</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">400</span>,<span class="number">600</span>);</span><br><span class="line">        <span class="keyword">this</span>.setTitle(<span class="string">"雷电"</span>);</span><br><span class="line">        <span class="comment">//当点击JFrame关闭时，整个程序也随之关闭</span></span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BallJFrame jFrame = <span class="keyword">new</span> BallJFrame();</span><br><span class="line">        jFrame.sh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>本次实践<strong>知识总结</strong>：<blockquote><ol><li>把图片放入窗体中有两种方法:<br>(1)、通过URL查找当前类的目录路径，再赋给ImageIcon类的对象，再用画笔类drawImage方法画出 （图片放在当前类的同一个包下）</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过当前类所有的目录取路径</span></span><br><span class="line">       URL imgURL = getClass().getResource(<span class="string">"back.jpg"</span>);</span><br><span class="line">       ImageIcon icon = <span class="keyword">new</span> ImageIcon(imgURL);</span><br><span class="line">       <span class="comment">//放入图片</span></span><br><span class="line">       g.drawImage(icon.getImage(),<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">600</span>,<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>（2）、直接new一个ImageIcon类的对象赋给Image类的对象，再用画笔类drawImage方法画出（图片放在项目的根目录下）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//awt包中Swing界面能识别图片的类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Image image_fire =</span><br><span class="line">            <span class="keyword">new</span> ImageIcon(<span class="string">"fire.gif"</span>).getImage();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Image image_el =</span><br><span class="line">            <span class="keyword">new</span> ImageIcon(<span class="string">"el_0.gif"</span>).getImage();</span><br><span class="line">            g.drawImage(image_fire,x,y,</span><br><span class="line">                        <span class="number">2</span>*r,<span class="number">2</span>*r,<span class="keyword">null</span>);</span><br><span class="line">            g.drawImage(image_el,x,y,</span><br><span class="line">                        <span class="number">2</span>*r,<span class="number">2</span>*r,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>java中添加信息弹出框的方法：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="string">"GAME OVER！"</span>);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用JAVA实现雷电小游戏&quot;&gt;&lt;a href=&quot;#用JAVA实现雷电小游戏&quot; class=&quot;headerlink&quot; title=&quot;用JAVA实现雷电小游戏&quot;&gt;&lt;/a&gt;用JAVA实现雷电小游戏&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;效果图如下：&lt;br&gt;&lt;img src=&quot;http
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://Threee-hub.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>排序算法一</title>
    <link href="http://Threee-hub.github.io/2020/02/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%80/"/>
    <id>http://Threee-hub.github.io/2020/02/13/排序算法一/</id>
    <published>2020-02-13T03:14:57.000Z</published>
    <updated>2020-02-14T12:15:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见排序算法-一-冒泡排序、选择排序、插入排序"><a href="#常见排序算法-一-冒泡排序、选择排序、插入排序" class="headerlink" title="常见排序算法 一 (冒泡排序、选择排序、插入排序)"></a>常见排序算法 一 (冒泡排序、选择排序、插入排序)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.day02;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author threee</span><br><span class="line"> * @date 2020/2/12 - 12:35</span><br><span class="line"> * 排序算法     (冒泡排序、选择排序、插入排序)</span><br><span class="line"> * 冒泡与选择的区别：</span><br><span class="line"> * 1、冒泡排序是比较相邻两位 ary[j] 和 ary[j+1]</span><br><span class="line"> * 2、选择排序是每一轮 其他的数和每轮的第一个数比   ary[i] 和 ary[j]</span><br><span class="line"> */</span><br><span class="line">public class Arry2Demo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">     int[] ary = new int[]&#123;11,2,6,3,9,1,323,124,45,24,67,32 &#125;;</span><br><span class="line">     //bull(ary);</span><br><span class="line">     //select(ary);</span><br><span class="line">        insert(ary);</span><br><span class="line">     System.out.println(Arrays.toString(ary));</span><br><span class="line">    &#125;</span><br><span class="line">    //冒泡排序</span><br><span class="line">    public static void bull(int[] ary)&#123;</span><br><span class="line">        for (int i=0; i&lt;ary.length-1; i++)&#123; //i控制轮数</span><br><span class="line">            for (int j=0; j&lt;ary.length-1-i ; j++)&#123;//j控制元素下标</span><br><span class="line">                if (ary[j]&gt;ary[j+1])&#123;           //相邻两个元素比</span><br><span class="line">                    int t = ary[j+1];</span><br><span class="line">                    ary[j+1] = ary[j];</span><br><span class="line">                    ary[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //选择排序  每一轮 其他的数和每轮第一个数比</span><br><span class="line">    public static void select(int[] ary)&#123;</span><br><span class="line">        for (int i=0; i&lt;ary.length-1; i++)&#123; //i控制轮数</span><br><span class="line">            for (int j=i+1; j&lt;ary.length; j++)&#123;//j控制元素</span><br><span class="line">                if (ary[i]&gt;ary[j])&#123;         //i和j比</span><br><span class="line">                    int t = ary[j];</span><br><span class="line">                    ary[j] = ary[i];</span><br><span class="line">                    ary[i] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //插入排序</span><br><span class="line">    /* 把数组分两半，从第二个元素起为右半部分(取数快，比较数慢，所以左边只留一个，提高效率)</span><br><span class="line">     * 拿右半部分的每个元素取出来</span><br><span class="line">     * 和左半部分进行比较</span><br><span class="line">     * 再插入到左半部分相应的位置</span><br><span class="line">     **/</span><br><span class="line">    public static void insert(int[] ary)&#123;</span><br><span class="line">        //首先从第二个元素开始拆俩半</span><br><span class="line">        //左半部分一开始只有一个数</span><br><span class="line">        int j = 0;</span><br><span class="line">        //右半部分循环</span><br><span class="line">        for (int i=1; i&lt;ary.length; i++)&#123;</span><br><span class="line">            //把右半的元素取出来，t要放在第二层for循环外</span><br><span class="line">            //因为t要和每个左边的元素比</span><br><span class="line">            int t = ary[i];</span><br><span class="line">            //左边循环</span><br><span class="line">            for (j=i-1; j&gt;=0; j--)&#123;</span><br><span class="line">                if (t&lt;ary[j])&#123;  //t和每个j比，如果比t大，j向右移动一位</span><br><span class="line">                    ary[j+1] = ary[j];</span><br><span class="line">                    ary[j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常见排序算法-一-冒泡排序、选择排序、插入排序&quot;&gt;&lt;a href=&quot;#常见排序算法-一-冒泡排序、选择排序、插入排序&quot; class=&quot;headerlink&quot; title=&quot;常见排序算法 一 (冒泡排序、选择排序、插入排序)&quot;&gt;&lt;/a&gt;常见排序算法 一 (冒泡排序、
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://Threee-hub.github.io/tags/Java/"/>
    
      <category term="算法" scheme="http://Threee-hub.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 数据库基本语句 一</title>
    <link href="http://Threee-hub.github.io/2019/12/31/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/"/>
    <id>http://Threee-hub.github.io/2019/12/31/Oracle数据库基本语句/</id>
    <published>2019-12-31T04:50:00.000Z</published>
    <updated>2020-01-29T06:16:23.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Oracle-数据库-基本语句-一"><a href="#Oracle-数据库-基本语句-一" class="headerlink" title="Oracle 数据库 基本语句 一"></a>Oracle 数据库 基本语句 一</h3><p><strong>一、SQL的三大语言</strong><br>    1. DML（数据操作语言）：数据库的更新与查询（SELECT，FROM，INSET，GROUP BY， HAVING，UPDATE， DELETE），在开发之中几乎都是以DML操作为主的。<br>    2. DDL（数据定义语言）：数据库对象的定义语言，例如：数据表，约束，索引，同义词，用户在设计数据库设计的时候都必须掌握。<br>    3. DCL（数据库控制语言）：数据库的权限控制。</p><blockquote><hr></blockquote><p><strong>二、SQL基本查询语句</strong><br>    &gt; 1. 基本查询<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> SELECT  [DISTINCT]  * | 列1[别名1]，列2[别名2]，……</span><br><span class="line">             FROM 表名称[表别名];</span><br><span class="line">Eg: select * from goods_table         //查找表中所有数据</span><br><span class="line">Eg: select empno 雇员编号，sal*12 年薪 from emp   //查询emp表中的empno且计算员工的年薪，在输出表格中，设置别名显示</span><br></pre></td></tr></table></figure><br>    &gt; 2.  限定查询：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">逻辑运算可以保证连接多个条件，主要的逻辑连接符有AND,OR,NOT</span><br><span class="line">Eg：要求查询出工作不是clerk，但是工资低于3000的雇员</span><br><span class="line">SELECT *FROM emp</span><br><span class="line">WHERE job&lt;&gt;’clerk’ AND sal &lt; 3000 ;</span><br></pre></td></tr></table></figure><br>    &gt; 3. 范围限定查询：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BETWEEN…AND 的主要功能是进行范围的查询</span><br><span class="line">Eg：查询出工资在1500-3000之间的所有雇员</span><br><span class="line">SELECT * FROM emp</span><br><span class="line">WHERE sal BETWEEN 1500 AND 3000;</span><br></pre></td></tr></table></figure><br>    &gt; 4. in、not in 操作符<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IN，NOT IN指的是根据一个指定的范围进行数据查询。</span><br><span class="line">Eg：查询出雇员编号是7369、7566、7788、9999的雇员信息。</span><br><span class="line">SELECT * FROM emp</span><br><span class="line">  WHERE empno IN (7369,7566,7788,9999);</span><br></pre></td></tr></table></figure><br>    &gt; 5. 模糊查询：like<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  LIKE可以实现数据的模糊查询操作，如何要想使用LIKE则必须使用如下的两个符号：</span><br><span class="line">“.”:匹配任意的一位符号；</span><br><span class="line">“%”:匹配任意的符号（包含匹配0位，1位，多位）；</span><br><span class="line">Eg：查询所有雇员姓名中一字母A开头的雇员信息</span><br><span class="line">SELECT * FROM emp</span><br><span class="line">WHERE ename LIKE &apos;A%&apos;;</span><br><span class="line">Eg：查询所有雇员姓名中第二个字母是A的所有雇员,第一位可以人任意，但是必须占一位字符，使用“_”；后面的位随便，使用“%”。</span><br><span class="line">SELECT *  FROM emp</span><br><span class="line">WHERE ename LIKE &apos;_A%&apos;;</span><br><span class="line"> Eg：查询雇员姓名中任意位置上存在有字母A的雇员信息</span><br><span class="line">SELECT *  FROM emp</span><br><span class="line">WHERE ename LIKE &apos;%A%&apos;;</span><br></pre></td></tr></table></figure><br>    &gt; 6. 指定顺序查询<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     ORDER BY 排序字段 [ASC|DESC]，排序字段 [ASC|DESC], …</span><br><span class="line">        升序：ASC，默认不写排序也是升序；</span><br><span class="line">        降序：DESC，由高到低进行排序。</span><br><span class="line">Eg：按照工资由高到底排序（降序）</span><br><span class="line">SELECT * FROM emp ORDER BY sal DESC;</span><br><span class="line">Eg：按照工资由高到底排序(降序)，如果工资相同，则按照雇佣日期由早到晚排序。</span><br><span class="line">SELECT * FROM emp ORDER BY sal DESC,hiredate ASC;</span><br></pre></td></tr></table></figure></p><blockquote><hr></blockquote><p><strong>三、SQL    插入语句</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into 语句  （向表格中插入新的行）</span><br><span class="line">insert into 表名称  values (值1, 值2,....)</span><br><span class="line">也可以指定所要插入数据的列：</span><br><span class="line">insert into  表名称(列1，列2，....)   values (值1, 值2,....)</span><br></pre></td></tr></table></figure></p><blockquote><hr></blockquote><p><strong>四、SQL    更新(修改)语句</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update 语句   （用于修改表中的数据）</span><br><span class="line"> update 表名称 set 列名称 = 新值 where 列名称 = 某值</span><br></pre></td></tr></table></figure></p><blockquote><hr></blockquote><p><strong>五、SQL    删除语句</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete 语句   （用于删除表中的数据）</span><br><span class="line"> delete from 表名称 where 列名称 = 值</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Oracle-数据库-基本语句-一&quot;&gt;&lt;a href=&quot;#Oracle-数据库-基本语句-一&quot; class=&quot;headerlink&quot; title=&quot;Oracle 数据库 基本语句 一&quot;&gt;&lt;/a&gt;Oracle 数据库 基本语句 一&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;一、
      
    
    </summary>
    
    
    
      <category term="Oracle数据库" scheme="http://Threee-hub.github.io/tags/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>采取hdfd命令来对FileSystem进行操作</title>
    <link href="http://Threee-hub.github.io/2019/12/19/hadoop%E5%91%BD%E4%BB%A4/"/>
    <id>http://Threee-hub.github.io/2019/12/19/hadoop命令/</id>
    <published>2019-12-19T15:35:58.000Z</published>
    <updated>2019-12-19T08:39:02.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="采取hdfd命令来对FileSystem进行操作"><a href="#采取hdfd命令来对FileSystem进行操作" class="headerlink" title="采取hdfd命令来对FileSystem进行操作"></a>采取hdfd命令来对FileSystem进行操作</h3><ol><li>创建文件夹<br> hadoop fs -mkdir 文件名    分布式文件系统的目录    Eg：hadoop fs -mkdir /java/</li><li>上传文件<br> hadoop fs -put Linnux文件下的文件    hdfs下面的文件</li><li>下载文件<br> hadoop fs -get 分布式文件系统的文件 下载到的路径</li><li>删除文件或目录<br> hadoop fs -rm 分布式文件系统的文件<br> hadoop fs -rmr 分布式文件系统的目录</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;采取hdfd命令来对FileSystem进行操作&quot;&gt;&lt;a href=&quot;#采取hdfd命令来对FileSystem进行操作&quot; class=&quot;headerlink&quot; title=&quot;采取hdfd命令来对FileSystem进行操作&quot;&gt;&lt;/a&gt;采取hdfd命令来对File
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://Threee-hub.github.io/tags/linux/"/>
    
      <category term="hadoop" scheme="http://Threee-hub.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop 伪分布式搭建配置</title>
    <link href="http://Threee-hub.github.io/2019/12/19/hadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://Threee-hub.github.io/2019/12/19/hadoop伪分布式搭建配置/</id>
    <published>2019-12-19T08:30:30.000Z</published>
    <updated>2020-02-14T12:15:41.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hadoop-伪分布式搭建配置"><a href="#hadoop-伪分布式搭建配置" class="headerlink" title="hadoop 伪分布式搭建配置"></a>hadoop 伪分布式搭建配置</h3><p><strong>安装JDK</strong></p><ol><li><p>上传alt+p 后出现sftp窗口，然后put d:\xxx\yy\ll\jdk-7u_65-i585.tar.gz</p></li><li><p>解压jdk</p><pre><code>#创建文件夹mkdir /home/hadoop/app#解压tar -zxvf jdk-7u65-linux-i586.tar.gz -C /home/hadoop/app</code></pre></li><li><p>将java添加到环境变量中</p><pre><code>vim /etc/profile#在文件最后添加export JAVA_HOME=//usr/tools/jdk-7u_65-i585    //jdk安装路径export PATH=$PATH:$JAVA_HOME/bin#刷新配置source /etc/profile</code></pre></li></ol><p><strong>安装hadoop-2.4.1</strong></p><blockquote><p>先上传hadoop的安装包到虚拟机上去/home/hadoop/<br>注意：hadoop2.x的配置文件$HADOOP_HOME/etc/hadoop<br>伪分布式需要修改5个配置文件</p></blockquote><p><strong>配置hadoop</strong></p><pre><code>第一个：hadoop-env.sh    vim hadoop-env.sh    #第27行    export JAVA_HOME=/software/jdk1.7.0_65   //jdk安装路径第二个：core-site.xml    &lt;!-- 指定HADOOP所使用的文件系统schema（URI），HDFS的老大（NameNode）的地址 --&gt;    &lt;property&gt;        &lt;name&gt;fs.defaultFS&lt;/name&gt;        &lt;value&gt;hdfs://192.168.175.130:9000（虚拟机IP。9000不改）&lt;/value&gt;    &lt;/property&gt;    &lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;        &lt;value&gt;//usr/soft/hadoop-2.4.1/tmp（hadoop运行时产生文件的存储目录）&lt;/value&gt;            &lt;/property&gt;第三个：hdfs-site.xml       &lt;!-- 指定HDFS副本的数量 --&gt;    &lt;property&gt;        &lt;name&gt;dfs.replication&lt;/name&gt;        &lt;value&gt;1&lt;/value&gt;&lt;/property&gt;第四个：mapred-site.xml     mv mapred-site.xml.template mapred-site.xml   //剪切更改模板    vim mapred-site.xml    &lt;!-- 指定mr运行在yarn上 --&gt;    &lt;property&gt;        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;        &lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;第五个：yarn-site.xml    &lt;!-- 指定YARN的老大（ResourceManager）的地址 --&gt;    &lt;property&gt;        &lt;name&gt;yarn.resourcemanager.192.168.175.130(你的虚拟机IP)&lt;/name&gt;        &lt;value&gt;（你的主机名）&lt;/value&gt;&lt;/property&gt;    &lt;!-- reducer获取数据的方式 --&gt;&lt;property&gt;        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;        &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;</code></pre><p><strong>将hadoop添加到环境变量</strong></p><pre><code>vim /etc/proflie    export JAVA_HOME=/usr/java/jdk1.7.0_65    export HADOOP_HOME=//usr/soft/hadoop-2.4.1               //jdk安装路径    export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin添加完成后刷新环境source /etc/profile</code></pre><p><strong>格式化namenode（是对namenode进行初始化）</strong></p><pre><code>hadoop namenode -format</code></pre><p><strong>启动hadoop</strong></p><pre><code>先启动HDFSstart-dfs.sh再启动YARNstart-yarn.sh</code></pre><p><strong>验证是否启动成功</strong></p><pre><code>使用jps命令验证：输入jps命令出现下列说明启动成功27408 NameNode28218 Jps27643 SecondaryNameNode28066 NodeManager27803 ResourceManager27512 DataNodehttp://192.168.175.130:50070 （HDFS管理界面）http://192.168.175.130:8088 （MR管理界面）</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hadoop-伪分布式搭建配置&quot;&gt;&lt;a href=&quot;#hadoop-伪分布式搭建配置&quot; class=&quot;headerlink&quot; title=&quot;hadoop 伪分布式搭建配置&quot;&gt;&lt;/a&gt;hadoop 伪分布式搭建配置&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;安装JDK&lt;/str
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://Threee-hub.github.io/tags/linux/"/>
    
      <category term="hadoop" scheme="http://Threee-hub.github.io/tags/hadoop/"/>
    
      <category term="Java" scheme="http://Threee-hub.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="http://Threee-hub.github.io/2019/12/18/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://Threee-hub.github.io/2019/12/18/linux常用命令/</id>
    <published>2019-12-18T15:35:58.000Z</published>
    <updated>2019-12-19T08:38:56.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h3><blockquote><p><strong>常用命令</strong>（查看目录、创建目录、删除、剪切、复制文件/目录）<br>man 命令        查看一个命令的用法（q键退出）<br>文件管理命令                   //命令里输入部分后 可以按tab键可以进行自动补全，前提是只有一个<br> ls 查看目录                                             linux常见目录<br>    -a  查看所有文件 包括隐藏文件                 /        根目录<br>    -l   查看详细列表                         ~        代表当前用户的家目录<br>    -d  仅仅查看目录                         home        每个用户会在home目录下创建一个新的目录对应该用户的家目录<br>cd 切换目录<br>pwd 查看当前所在的路径<br>touch 文件名   触摸一个文件，存在就改变文件的最后访问时间，不存在就创建文件<br>mkdir 目录名   创建目录        -p  递归创建（可以同时创建多级目录） Eg：mkdir -p java/thread/test<br>cp 源文件 目标地址       拷贝文件或目录       -r   递归拷贝（拷贝文件夹）   Eg：cp -r 源目录 目标目录<br>rmdir 目录名称    删除空目录<br>rm 文件名               删除文件               rm -r 目录名       递归删除目录    -f   强制删除<br>mv 文件名           剪切文件或目录     mv  源文件或目录   目标位置    mv    原文件名   新文件名   重命名文件</p></blockquote><blockquote><hr></blockquote><blockquote><p><strong>查看文件</strong><br>cat 文件名   查看文件里面的内容   -n  查看内容并显示行号   cat -n |more 分页查看文件里面的内容并显示行号，按空格查看下一页，按回车查看下一行<br>tac 文件名   倒过来查看文件里面的内容<br>head -n（数字）文件名    查看文件前n行的内容<br>tail -n（数字）文件名    查看文件后n行的内容</p></blockquote><blockquote><hr></blockquote><blockquote><p><strong>编辑文件</strong><br>vi(vim)    文件名     编辑文件，若不存在则创建这个文件 三种模式：</p></blockquote><ol><li>命令模式    vi(vim)   文件名<br>nyy   n代表一个数值  默认为1，表示复制光标开始往下n行<br>p  粘贴<br>ndd   n代表一个数值  默认为1，表示删除光标开始往下n行<br>：set number   设置行号<br>：行号  让光标定位到指定行</li><li>输入模式 （在命令模式输入a,A,i,I,o  进入输入模式，按esc回到命令模式）<br>i（在当前光标位置的前面插入）I（返回当前行最前面进行输入）<br>a（在当前光标位置的后面插入）A（返回当前行最后面进行输入）<br>o（在下一行插入）</li><li>编辑模式（在命令模式输入：进入编辑模式，按esc回到命令模式）：q 退出  ：w  保存  ：！强制   ：q！强制退出  ：wq 保存退出</li></ol><blockquote><hr></blockquote><blockquote><p><strong>查找文件</strong><br>find -name 文件名       根据文件名查找   “<em>文件部分名*”（查找包含该部分文件名的文件）<br>       -iname  文件名     根据文件名查找（忽略大小写）<br>find 指定的路径 -name 文件名         查找路径下来所有该文件名的文件                    Eg: find /home/ -name test<br>find /home/ -name “</em>.log”  查找该后缀的文件（在home路径下）<br>find  -size [+(大于)或-(小于)]文件大小     根据文件大小进行查找（大小单位默认字节）                        Eg：find /home/ -size +1G    查找该路径下大于1g的文件    单位：c，k，M,G<br>       -atime       根据最近修改时间进行查找（天）<br>       -ctime<br>       -mtime<br>find /home/ -atime +5    查找5天前访问过的文件（-5则是5天之内）<br>逻辑运算查找：<br>    -a   and   逻辑与<br>    -o     or     逻辑或<br>    -not  非      取反                       Eg：find /home/ -name “<em>hello</em>” -a -size +1M   查找文件名中包含hello的以及大小大于1M的文件</p></blockquote><blockquote><hr></blockquote><blockquote><p><strong>关机与重启</strong><br>reboot   重启<br>shutdown -h now 现在关机<br>shutdown -h 19:30 定时关机</p></blockquote><blockquote><hr></blockquote><blockquote><p><strong>文件的压缩与解压缩</strong></p></blockquote><ol><li>zip压缩文件命令<br> zip 压缩包名  文件名                                同时压缩多个则在文件名后再加文件名<br> zip  -r   压缩包名  目录名                          压缩目录所有文件在同一压缩包中<br> unzip 压缩包名                                     解压缩在当前目录下<br> unzip -d 指定一个目录 压缩包名                    解压缩到指定一个目录下</li><li>gz压缩文件命令<br> gzip 要压缩的文件名                                生成压缩文件后，原文件会默认删除<br>如果要压缩目录，先要把目录压缩成zip包，再压缩成gz包<br> gunzip 要解压缩的文件名                            解压缩.gz文件</li><li>tar压缩文件命令<br> tar 文件/目录/tar压缩包                            压缩文件/目录，解压缩<br> -c 打包<br> -v 显示详细信息<br> -f 用来指定压缩文件名<br>Eg：tar -cvf xxx.tar /home/xxx.xx                   把目录该文件打包压缩成xxx.tar<br> -x 解压缩<br> -C 指定解压文件存储路径<br>Eg：tar -xvf /home/java/test/xxx.tar -C /home/java    把/home/java/test/xxx.tar解压缩到/home/java下</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux命令&quot;&gt;&lt;a href=&quot;#Linux命令&quot; class=&quot;headerlink&quot; title=&quot;Linux命令&quot;&gt;&lt;/a&gt;Linux命令&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;常用命令&lt;/strong&gt;（查看目录、创建目录、删除、剪切
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://Threee-hub.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理 - 计算机系统概述 错题解析 + 知识点 一</title>
    <link href="http://Threee-hub.github.io/2019/11/26/%E7%BB%84%E5%8E%9F%E9%94%99%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://Threee-hub.github.io/2019/11/26/组原错题知识点/</id>
    <published>2019-11-26T15:35:58.000Z</published>
    <updated>2019-11-27T03:41:09.933Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机组成原理-计算机系统概述-错题解析-知识点-一"><a href="#计算机组成原理-计算机系统概述-错题解析-知识点-一" class="headerlink" title="计算机组成原理 - 计算机系统概述 错题解析 + 知识点 一"></a>计算机组成原理 - 计算机系统概述 错题解析 + 知识点 一</h3><h4 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h4><blockquote><ol><li>早期的冯·诺依曼机以<strong>运算器</strong>为中心，而现代计算机以<strong>存储器</strong>为中心。冯·诺依曼机最根本的特征是采用<strong>“存储程序”</strong>原理，基本工作方式是<strong>控制流驱动方式</strong>。</li><li><strong>“存储程序”原理</strong>，是将根据特定问题编写的程序存放在计算机存储器中，然后按存储器中的存储程序的首地址执行程序的第一条指令，以后就按照该程序的规定顺序执行其他指令，直至程序结束执行。</li></ol></blockquote><blockquote><hr></blockquote><h4 id="错题解析："><a href="#错题解析：" class="headerlink" title="错题解析："></a>错题解析：</h4><p>习题一：<br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/112601.png" alt="题目一"></p><blockquote><ol><li>答案为 C 。</li><li>计算机可以从时间和空间两方面来区分指令和数据。在时间上，<strong>取指周期(取指令)</strong>从内存中取出的是指令，而<strong>执行周期（执行指令）</strong>从内存取出或往内存中写入的是数据；在空间上，从内存中取出指令送<strong>控制器</strong>，而执行周期从内存从取的数据送<strong>运算器</strong>、往内存写入的数据也是来自于运算器。</li></ol></blockquote><blockquote><hr><p>习题二：<br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/112602.png" alt="题目二"></p><ol><li>答案为 C 。</li><li>基本原理：把存储单元所存内容的某一部分作为检索项（即关键字项），去检索该存储器。</li><li>计算机系统中，相联存储器主要用于虚拟存储器中存放段表、页表和快表，以及高速缓冲存储器Cache中存放块地址。这是因为，在这两种应用中，都需要快速查找。</li></ol></blockquote><blockquote><hr></blockquote><p>习题三：<br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/112603.png" alt="题目三"></p><blockquote><ol><li>答案为 C 。</li><li>翻译程序是指把高级语言源程序转换成机器语言程序（目标代码）的软件。主要有两种：一种是<strong>编译程序</strong>，它将高级语言源程序一次全部翻译成目标程序，每次执行程序时，只需执行目标程序，因此只要源程序不变，就无需重新编译。另一种是<strong>解释程序</strong>，它将源程序的一条语句翻译成对应的机器目标代码并立即执行，然后翻译下一条源程序语句并执行，直至全部源程序语句被翻译并执行完。所以解释程序的执行过程是翻译一句执行一句，并且不会生成目标程序。</li><li>汇编语言也是一种语言翻译程序，是面向机器的低级语言，是机器语言的符号表示，与机器语言一一对应。<br>如C语言编译链接过程：源程序（.C）–（C编译器）–&gt; 汇编源程序 –（汇编程序）–&gt; 目标程序 –（链接程序）–&gt; 可执行程序</li></ol></blockquote><blockquote><hr></blockquote><p>习题四：<br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/112604.png" alt="题目四"></p><blockquote><p>· 答案为 C 。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机组成原理-计算机系统概述-错题解析-知识点-一&quot;&gt;&lt;a href=&quot;#计算机组成原理-计算机系统概述-错题解析-知识点-一&quot; class=&quot;headerlink&quot; title=&quot;计算机组成原理 - 计算机系统概述 错题解析 + 知识点 一&quot;&gt;&lt;/a&gt;计算机组
      
    
    </summary>
    
    
    
      <category term="计算机组成原理" scheme="http://Threee-hub.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>操作系统 - 计算机系统概述 错题解析 二</title>
    <link href="http://Threee-hub.github.io/2019/11/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%94%99%E9%A2%9802/"/>
    <id>http://Threee-hub.github.io/2019/11/13/操作系统错题02/</id>
    <published>2019-11-13T11:03:14.000Z</published>
    <updated>2019-11-13T13:34:56.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作系统-——-计算机系统概述-错题解析-二"><a href="#操作系统-——-计算机系统概述-错题解析-二" class="headerlink" title="操作系统 —— 计算机系统概述 错题解析 二"></a>操作系统 —— 计算机系统概述 错题解析 二</h3><blockquote><p>选择题：<br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111301.png" alt="题目一"><br>答案为 C 。</p><ol><li>批处理的主要缺点是缺少<strong>交互性</strong></li><li>多道程序设计的提出是为了<strong>提高系统利用率和吞吐量</strong>。</li><li>I/O通道是实际上是一种特殊的<strong>处理器</strong>，它具有执行I/O指令的能力，并通过执行通道程序来控制I/O操作。特点为：通道指令类型单一（局限于与I/O操作有关的指令）、通道没有自己的内存（通道执行的指令一般放在其主机的内存中）。</li></ol></blockquote><blockquote><hr><p><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111302.png" alt="题目二"><br>答案为 A 。命令解释程序（如Shell）属于命令接口，在用户态执行。</p></blockquote><blockquote><hr><p><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111303.png" alt="题目三"><br>答案为 B 。</p><ol><li>中断处理和子程序调用时，一定会保存PC（程序计数器）。</li><li>通用数据寄存器和通用地址寄存器在子程序调用时，若有数据更改则需要保存若无更改则不需要。</li><li>程序状态字寄存器（PSWR）: 运算器的一部分，其中某标志位<strong>标记了当前处理器状态（内核态 or 用户态）</strong>。中断处理程序结束时，需将处理器状态切换回原有状态（即修改PSWR标志位）。PSW用来存放两类信息：一类是体现当前指令执行结果的各种状态信息，如有无进位（CY位），有无溢出（OV位），结果正负（SF位），结果是否为零（ZF位），奇偶标志位（P位）等；另一类是存放控制信息，如允许中断(IF位)，跟踪标志（TF位）等。有些机器中将PSW称为标志寄存器FR（Flag Register）。</li></ol></blockquote><blockquote><hr><p><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111304.png" alt="题目四"><br>答案为 C 。（看清题目是在用户态<strong>发生</strong>还是<strong>执行</strong>）<br>进程切换是发生在系统调用执行过程中的事件，因此只能发生在内核态。</p></blockquote><blockquote><hr><p><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111305.png" alt="题目五"><br>答案为 C 。</p><ol><li>当要执行系统调用时，用户先传递系统调用参数给通用寄存器，再执行陷入（trap）指令进入内核态，从通用寄存器中得到数据执行相应的服务程序，执行结束后回到用户态。</li><li><strong>区分执行态的主要目的是保护系统程序。用户态到核心态的转换发生在中断产生时，而核心态转换到用户态发生在中断返回用户系统时</strong>。</li><li><strong>陷入（trap）指令： 又称访管指令。系统调用时，该指令使处理机从用户态转为内核态</strong>。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;操作系统-——-计算机系统概述-错题解析-二&quot;&gt;&lt;a href=&quot;#操作系统-——-计算机系统概述-错题解析-二&quot; class=&quot;headerlink&quot; title=&quot;操作系统 —— 计算机系统概述 错题解析 二&quot;&gt;&lt;/a&gt;操作系统 —— 计算机系统概述 错题解析
      
    
    </summary>
    
    
    
      <category term="操作系统" scheme="http://Threee-hub.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统 - 计算机系统概述 错题解析 一</title>
    <link href="http://Threee-hub.github.io/2019/11/12/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%94%99%E9%A2%9801/"/>
    <id>http://Threee-hub.github.io/2019/11/12/操作系统错题01/</id>
    <published>2019-11-12T15:41:37.000Z</published>
    <updated>2020-02-14T12:15:30.896Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作系统-——-计算机系统概述-错题解析-一"><a href="#操作系统-——-计算机系统概述-错题解析-一" class="headerlink" title="操作系统 —— 计算机系统概述 错题解析 一"></a>操作系统 —— 计算机系统概述 错题解析 一</h3><blockquote><p>应用题：计算CPU利用率。（利用<strong>甘特图</strong>求解）<br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111202.jpg" alt="题目一"><br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/%E7%94%98%E7%89%B9%E5%9B%BE.jpg" alt="答案一"><br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111201.jpg" alt="答案二"></p><ul><li>绘制甘特图时，需注意<strong>打印设备、处理器</strong>是只能有一个程序使用而不能多个程序同时使用。</li><li>多道批处理系统的<strong>I/O设备</strong>可与<strong>CPU</strong>并行工作，这是借助于<strong>中断技术</strong> 实现的。</li></ul></blockquote><blockquote><hr></blockquote><blockquote><p>选择题：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111203.jpg" alt="题目二"></p><blockquote><ul><li>计算机开机后，操作系统最终被加载到RAM中。</li><li>裸机状态时，BIOS存在在ROM中，且只有ROM中有数据。</li></ul><hr><p><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111204.jpg" alt="题目三"></p><ul><li>操作系统接口分为三部分：</li></ul><ol><li>命令接口：用户利用这些操作命令来组织和控制作业的执行。方式有两种：联机控制方式和脱机控制方式。</li><li>程序接口（即系统调用）: 由一组系统调用命令组成。用户通过在程序中使用这些系统调用命令来请求操作系统为其提供服务。</li><li>图形接口：如GUI（图形用户界面），严格来说GUI图形接口不是操作系统的一部分，但图形接口所调用的系统调用命令是操作系统的一部分。图形接口也是通过调用程序接口实现的。</li></ol><ul><li>Shell 是指“为使用者提供操作界面”的软件（即命令解析器），属于命令接口。它接收用户命令，然后调用相应的应用程序。</li><li>广义指令就是系统调用指令。而系统中的缓存全部由操作系统管理，对用户是透明的，操作系统不提供管理系统缓存的系统调用。</li></ul></blockquote><blockquote><hr></blockquote><p><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/codesrc/111205.jpg" alt="题目四"></p><blockquote><ul><li>多道程序的运行环境比单道程序更加复杂，但是多道程序时程序的执行就失去了封闭性和顺序性。并且因为<strong>共享</strong>资源及相互协同而产生了竞争，相互<strong>制约</strong>。多道程序设计的系统中允许多个程序进入内存，但为了公平性，各个程序是<strong>交替</strong>运行，当一道程序暂停时，CPU立即转去运行其他程序。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;操作系统-——-计算机系统概述-错题解析-一&quot;&gt;&lt;a href=&quot;#操作系统-——-计算机系统概述-错题解析-一&quot; class=&quot;headerlink&quot; title=&quot;操作系统 —— 计算机系统概述 错题解析 一&quot;&gt;&lt;/a&gt;操作系统 —— 计算机系统概述 错题解析
      
    
    </summary>
    
    
    
      <category term="操作系统" scheme="http://Threee-hub.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>子类调用构造函数时遇到的小问题</title>
    <link href="http://Threee-hub.github.io/2019/11/09/%E5%AD%90%E7%B1%BB%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
    <id>http://Threee-hub.github.io/2019/11/09/子类构造方法/</id>
    <published>2019-11-09T12:54:27.000Z</published>
    <updated>2020-02-14T12:15:27.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="子类调用构造函数时遇到的小问题"><a href="#子类调用构造函数时遇到的小问题" class="headerlink" title="子类调用构造函数时遇到的小问题"></a>子类调用构造函数时遇到的小问题</h3><blockquote><p>当子类调用构造函数时，若未使用this()和super()，系统则会在子类构造函数时自动调用父类的无参构造函数（即自动补上super()）,因此若父类并未构造无参构造函数时，程序就会报错。</p></blockquote><pre><code>public class student extends person{    public student(String name, int age, char sex) {    }}class person {    private String name;    private int age;    private char sex;    public person(String name, int age, char sex) {        this.name = name;        this.age = age;        this.sex = sex;    }}</code></pre><p><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/1110%E9%94%99%E8%AF%AF%E6%88%AA%E5%9B%BE2.png" alt="错误信息01"><br><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/1110%E9%94%99%E8%AF%AF%E6%88%AA%E5%9B%BE.png" alt="错误信息02"></p><blockquote><p>解决这个问题的方法如下：</p></blockquote><ul><li>在父类中添加无参构造方法 person(){}</li><li>在子类的构造方法中添加 super( name, age, sex )</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;子类调用构造函数时遇到的小问题&quot;&gt;&lt;a href=&quot;#子类调用构造函数时遇到的小问题&quot; class=&quot;headerlink&quot; title=&quot;子类调用构造函数时遇到的小问题&quot;&gt;&lt;/a&gt;子类调用构造函数时遇到的小问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;当子类调用
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://Threee-hub.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>静态属性、代码块的执行顺序</title>
    <link href="http://Threee-hub.github.io/2019/11/08/%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>http://Threee-hub.github.io/2019/11/08/代码块/</id>
    <published>2019-11-08T04:47:47.191Z</published>
    <updated>2020-02-14T12:15:25.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态属性、静态代码块以及构造代码块的执行先后顺序"><a href="#静态属性、静态代码块以及构造代码块的执行先后顺序" class="headerlink" title="静态属性、静态代码块以及构造代码块的执行先后顺序"></a>静态属性、静态代码块以及构造代码块的执行先后顺序</h2><blockquote><p>最近遇到一道Java先后调用的题（下图），程序中输出A.x和B.y的值。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/threee-hub/img@master/%E4%BB%A3%E7%A0%81%E5%9D%97.png" alt="代码块"></p><blockquote><p>如图，输出1，2。       那么是为什么呢<br>从主函数开始，载入A类，A类具有静态属性和静态代码块，而静态属性和静态代码块是按顺序执行，哪个在前面就先执行哪个，所以x被赋初值为0<br>再执行静态代码块，此时调用B类，静态属性y并未赋值而是被JVM赋了初值0，因此此时x=1，y=0.并输出“静态代码块被调用”<br>下一步主函数创建了A类的对象，构造代码块被调用并输出，下一步输出B.y，y被赋值 y=A.x + 1 = 1+1=2.  最后输出1和2.</p></blockquote><h5 id="因此我们可以得出结果，静态属性和静态代码块是按顺序执行，哪个在前面就先执行哪个，而构造代码块是当类对象实例化时（new时）被调用。这题还有一个知识点就是类的生命周期，下次再学习分享一下哦"><a href="#因此我们可以得出结果，静态属性和静态代码块是按顺序执行，哪个在前面就先执行哪个，而构造代码块是当类对象实例化时（new时）被调用。这题还有一个知识点就是类的生命周期，下次再学习分享一下哦" class="headerlink" title="因此我们可以得出结果，静态属性和静态代码块是按顺序执行，哪个在前面就先执行哪个，而构造代码块是当类对象实例化时（new时）被调用。这题还有一个知识点就是类的生命周期，下次再学习分享一下哦~"></a>因此我们可以得出结果，静态属性和静态代码块是按顺序执行，哪个在前面就先执行哪个，而构造代码块是当类对象实例化时（new时）被调用。这题还有一个知识点就是类的生命周期，下次再学习分享一下哦~</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;静态属性、静态代码块以及构造代码块的执行先后顺序&quot;&gt;&lt;a href=&quot;#静态属性、静态代码块以及构造代码块的执行先后顺序&quot; class=&quot;headerlink&quot; title=&quot;静态属性、静态代码块以及构造代码块的执行先后顺序&quot;&gt;&lt;/a&gt;静态属性、静态代码块以及构造
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://Threee-hub.github.io/tags/Java/"/>
    
      <category term="静态属性" scheme="http://Threee-hub.github.io/tags/%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7/"/>
    
      <category term="静态代码块" scheme="http://Threee-hub.github.io/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    
  </entry>
  
</feed>
